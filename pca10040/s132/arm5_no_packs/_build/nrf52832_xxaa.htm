<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\nrf52832_xxaa.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\nrf52832_xxaa.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Dec 12 12:20:53 2019
<BR><P>
<H3>Maximum Stack Usage =        568 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
nrf_sdh_ble_evts_poll &rArr; app_error_handler_bare
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[19]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[52]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[52]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</a><BR>
 <LI><a href="#[53]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[53]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">BusFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[19]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1d]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[18]">ECB_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2e]">FPU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[10]">GPIOTE_IRQHandler</a> from nrfx_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2d]">I2S_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[28]">MWU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3]">MemoryManagement_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[f]">NFCT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[27]">PDM_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[a]">POWER_CLOCK_IRQHandler</a> from nrfx_clock.o(i.POWER_CLOCK_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[26]">PWM0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[29]">PWM1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2a]">PWM2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1c]">QDEC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[b]">RADIO_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[17]">RNG_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[15]">RTC0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1b]">RTC1_IRQHandler</a> from drv_rtc.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2c]">RTC2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[11]">SAADC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[d]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[e]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2b]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1e]">SWI0_EGU0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1f]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[20]">SWI2_EGU2_IRQHandler</a> from nrf_sdh.o(i.SWI2_EGU2_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[21]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[22]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[23]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[38]">SendTimer_handler</a> from main.o(i.SendTimer_handler) referenced from main.o(i.init_timer)
 <LI><a href="#[9]">SysTick_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[30]">SystemInit</a> from system_nrf52.o(i.SystemInit) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[16]">TEMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[12]">TIMER0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[13]">TIMER1_IRQHandler</a> from nrfx_timer.o(i.TIMER1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[14]">TIMER2_IRQHandler</a> from nrfx_timer.o(i.TIMER2_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[24]">TIMER3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[25]">TIMER4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[c]">UARTE0_UART0_IRQHandler</a> from nrfx_prs.o(i.UARTE0_UART0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1a]">WDT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[31]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[3a]">app_error_fault_handler</a> from app_error_weak.o(i.app_error_fault_handler) referenced from nrf_sdh.o(i.nrf_sdh_enable_request)
 <LI><a href="#[3e]">battery_level_meas_timeout_handler</a> from main.o(i.battery_level_meas_timeout_handler) referenced from main.o(i.timers_init)
 <LI><a href="#[43]">ble_advertising_on_ble_evt</a> from ble_advertising.o(i.ble_advertising_on_ble_evt) referenced from main.o(sdh_ble_observers1)
 <LI><a href="#[46]">ble_bas_on_ble_evt</a> from ble_bas.o(i.ble_bas_on_ble_evt) referenced from main.o(sdh_ble_observers2)
 <LI><a href="#[49]">ble_dfu_buttonless_on_ble_evt</a> from ble_dfu.o(i.ble_dfu_buttonless_on_ble_evt) referenced from ble_dfu.o(sdh_ble_observers2)
 <LI><a href="#[4c]">ble_dfu_buttonless_on_sys_evt</a> from ble_dfu_unbonded.o(i.ble_dfu_buttonless_on_sys_evt) referenced from ble_dfu_unbonded.o(sdh_soc_observers1)
 <LI><a href="#[41]">ble_evt_handler</a> from ble_conn_state.o(i.ble_evt_handler) referenced from ble_conn_state.o(sdh_ble_observers0)
 <LI><a href="#[44]">ble_evt_handler</a> from bsp_btn_ble.o(i.ble_evt_handler) referenced 2 times from bsp_btn_ble.o(sdh_ble_observers1)
 <LI><a href="#[4a]">ble_evt_handler</a> from main.o(i.ble_evt_handler) referenced from main.o(sdh_ble_observers3)
 <LI><a href="#[47]">ble_nus_on_ble_evt</a> from ble_nus.o(i.ble_nus_on_ble_evt) referenced from main.o(sdh_ble_observers2)
 <LI><a href="#[3f]">bsp_button_event_handler</a> from bsp.o(i.bsp_button_event_handler) referenced 4 times from bsp.o(.constdata)
 <LI><a href="#[39]">clock_irq_handler</a> from nrf_drv_clock.o(i.clock_irq_handler) referenced from nrf_drv_clock.o(i.nrf_drv_clock_init)
 <LI><a href="#[40]">compare_func</a> from app_timer2.o(i.compare_func) referenced from app_timer2.o(.constdata)
 <LI><a href="#[36]">conn_params_error_handler</a> from main.o(i.conn_params_error_handler) referenced from main.o(i.conn_params_init)
 <LI><a href="#[37]">gatt_evt_handler</a> from main.o(i.gatt_evt_handler) referenced from main.o(i.gatt_init)
 <LI><a href="#[2f]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[42]">nrf_ble_gatt_on_ble_evt</a> from nrf_ble_gatt.o(i.nrf_ble_gatt_on_ble_evt) referenced from main.o(sdh_ble_observers1)
 <LI><a href="#[48]">nrf_ble_qwr_on_ble_evt</a> from nrf_ble_qwr.o(i.nrf_ble_qwr_on_ble_evt) referenced from main.o(sdh_ble_observers2)
 <LI><a href="#[3c]">nrf_qwr_error_handler</a> from main.o(i.nrf_qwr_error_handler) referenced from main.o(i.services_init)
 <LI><a href="#[4d]">nrf_sdh_ble_evts_poll</a> from nrf_sdh_ble.o(i.nrf_sdh_ble_evts_poll) referenced from nrf_sdh_ble.o(sdh_stack_observers0)
 <LI><a href="#[4e]">nrf_sdh_soc_evts_poll</a> from nrf_sdh_soc.o(i.nrf_sdh_soc_evts_poll) referenced from nrf_sdh_soc.o(sdh_stack_observers0)
 <LI><a href="#[3d]">nus_data_handler</a> from main.o(i.nus_data_handler) referenced from main.o(i.services_init)
 <LI><a href="#[32]">on_adv_evt</a> from main.o(i.on_adv_evt) referenced from main.o(i.advertising_init)
 <LI><a href="#[35]">on_conn_params_evt</a> from main.o(i.on_conn_params_evt) referenced from main.o(i.conn_params_init)
 <LI><a href="#[33]">rtc_irq</a> from app_timer2.o(i.rtc_irq) referenced from app_timer2.o(i.app_timer_init)
 <LI><a href="#[4f]">sd_state_evt_handler</a> from nrf_drv_clock.o(i.sd_state_evt_handler) referenced from nrf_drv_clock.o(sdh_state_observers0)
 <LI><a href="#[4b]">soc_evt_handler</a> from nrf_drv_clock.o(i.soc_evt_handler) referenced from nrf_drv_clock.o(sdh_soc_observers0)
 <LI><a href="#[3b]">timer_dummy_handler</a> from ppi_gpiote.o(i.timer_dummy_handler) referenced from ppi_gpiote.o(i.ppi_Setting)
 <LI><a href="#[34]">update_timeout_handler</a> from ble_conn_params.o(i.update_timeout_handler) referenced from ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[31]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[199]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[50]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[19a]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[19b]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[19c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[19d]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[19e]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[136]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_req</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
</UL>

<P><STRONG><a name="[52]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>

<P><STRONG><a name="[139]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_req</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
</UL>

<P><STRONG><a name="[53]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>

<P><STRONG><a name="[19f]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_space_clear</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text), UNUSED)

<P><STRONG><a name="[13f]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>

<P><STRONG><a name="[140]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>

<P><STRONG><a name="[13d]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
</UL>

<P><STRONG><a name="[1a0]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[1a1]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[1a2]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[1a3]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_cmp_exch</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[1a4]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub_hs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SAADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1a5]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ctrl_pt_write
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_evt
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
</UL>

<P><STRONG><a name="[1a6]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1a7]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_service_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_char_add
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hvx_tx_complete
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;descriptor_add
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
</UL>

<P><STRONG><a name="[1a9]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[e8]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_ascii_to_utf8
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1aa]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1ab]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[10]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 528 bytes, Stack size 72 bytes, nrfx_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GPIOTE_IRQHandler &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_ports_read
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_set
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_is_set
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, nrfx_clock.o(i.POWER_CLOCK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = POWER_CLOCK_IRQHandler &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_disable
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RTC1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_rtc.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_sdh.o(i.SWI2_EGU2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SWI2_EGU2_IRQHandler &rArr; nrf_sdh_evts_poll &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SendTimer_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(i.SendTimer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SendTimer_handler &rArr; advertising_start &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.init_timer)
</UL>
<P><STRONG><a name="[73]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_nrf52.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[30]"></a>SystemInit</STRONG> (Thumb, 596 bytes, Stack size 8 bytes, system_nrf52.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_66
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_57
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_37
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_36
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_32
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_31
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_182
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_16
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_136
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_12
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_108
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[13]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_timer.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER1_IRQHandler &rArr; irq_handler &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_timer.o(i.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER2_IRQHandler &rArr; irq_handler &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>Timer_Disable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ppi_gpiote.o(i.Timer_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Timer_Disable &rArr; nrfx_timer_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
</UL>

<P><STRONG><a name="[77]"></a>Timer_To1Second</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ppi_gpiote.o(i.Timer_To1Second))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Timer_To1Second &rArr; nrfx_timer_extended_compare &rArr; nrfx_timer_compare &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_extended_compare
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_enable
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
</UL>

<P><STRONG><a name="[7a]"></a>Timer_TohalfSecond</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ppi_gpiote.o(i.Timer_TohalfSecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Timer_TohalfSecond &rArr; nrfx_timer_extended_compare &rArr; nrfx_timer_compare &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_extended_compare
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
</UL>

<P><STRONG><a name="[c]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrfx_prs.o(i.UARTE0_UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTE0_UART0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1ae]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1af]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1b0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[3a]"></a>app_error_fault_handler</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh.o(i.nrf_sdh_enable_request)
</UL>
<P><STRONG><a name="[82]"></a>app_error_handler_bare</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, app_error.o(i.app_error_handler_bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blinking_setup
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppi_Setting
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_management_init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_evt
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_qwr_error_handler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_error_handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_update
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_id_encode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnp_id_encode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_report_ref_encode
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
</UL>

<P><STRONG><a name="[85]"></a>app_fifo_get</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, app_fifo.o(i.app_fifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_fifo_get &rArr; fifo_get &rArr; fifo_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_length
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>

<P><STRONG><a name="[88]"></a>app_fifo_put</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, app_fifo.o(i.app_fifo_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_fifo_put
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_put
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_length
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>

<P><STRONG><a name="[8a]"></a>app_timer_cnt_get</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_timer2.o(i.app_timer_cnt_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_timer_cnt_get &rArr; drv_rtc_counter_get
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_schedule
</UL>

<P><STRONG><a name="[c3]"></a>app_timer_create</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_timer2.o(i.app_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
</UL>

<P><STRONG><a name="[8c]"></a>app_timer_init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, app_timer2.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_timer_init &rArr; drv_rtc_compare_set &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_overflow_enable
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_set
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
</UL>

<P><STRONG><a name="[91]"></a>app_timer_start</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, app_timer2.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_schedule
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_now
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
</UL>

<P><STRONG><a name="[94]"></a>app_timer_stop</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_timer2.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_timer_stop &rArr; timer_req_schedule &rArr; nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
</UL>

<P><STRONG><a name="[95]"></a>app_uart_put</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, app_uart_fifo.o(i.app_uart_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx_in_progress
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx_in_progress
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
</UL>

<P><STRONG><a name="[99]"></a>app_util_critical_region_enter</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_ppi_channel_alloc
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
</UL>

<P><STRONG><a name="[9b]"></a>app_util_critical_region_exit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_ppi_channel_alloc
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
</UL>

<P><STRONG><a name="[a5]"></a>blcm_link_ctx_get</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ble_link_ctx_manager.o(i.blcm_link_ctx_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hvx_tx_complete
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>

<P><STRONG><a name="[a7]"></a>ble_advdata_encode</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, ble_advdata.o(i.ble_advdata_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_power_level_encode
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_encode
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_encode
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_addr_encode
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appearance_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[b0]"></a>ble_advdata_parse</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ble_advdata.o(i.ble_advdata_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_search
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set
</UL>

<P><STRONG><a name="[b1]"></a>ble_advdata_search</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, ble_advdata.o(i.ble_advdata_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ble_advdata_search
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_parse
</UL>

<P><STRONG><a name="[83]"></a>ble_advertising_conn_cfg_tag_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_advertising.o(i.ble_advertising_conn_cfg_tag_set))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>

<P><STRONG><a name="[81]"></a>ble_advertising_init</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, ble_advertising.o(i.ble_advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ble_advertising_init &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_is_valid
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_set_data_size_max_get
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>

<P><STRONG><a name="[43]"></a>ble_advertising_on_ble_evt</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ble_advertising.o(i.ble_advertising_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ble_advertising_on_ble_evt &rArr; on_terminated &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_terminated
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[84]"></a>ble_advertising_start</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, ble_advertising.o(i.ble_advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ble_advertising_start &rArr; set_adv_mode_slow &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_slow
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_fast
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_directed_high_duty
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_directed
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_is_valid
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_mode_next_avail_get
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_terminated
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected
</UL>

<P><STRONG><a name="[a4]"></a>ble_bas_battery_level_update</STRONG> (Thumb, 210 bytes, Stack size 104 bytes, ble_bas.o(i.ble_bas_battery_level_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ble_bas_battery_level_update &rArr; ble_conn_state_conn_handles &rArr; conn_handle_list_get &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_notification_send
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_status
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_update
</UL>

<P><STRONG><a name="[c0]"></a>ble_bas_init</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ble_bas.o(i.ble_bas_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ble_bas_init &rArr; battery_level_char_add &rArr; characteristic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[46]"></a>ble_bas_on_ble_evt</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ble_bas.o(i.ble_bas_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_bas_on_ble_evt &rArr; on_write &rArr; ble_srv_is_notification_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[c2]"></a>ble_conn_params_init</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ble_conn_params.o(i.ble_conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_conn_params_init &rArr; app_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
</UL>

<P><STRONG><a name="[bd]"></a>ble_conn_state_conn_handles</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_conn_handles))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_conn_state_conn_handles &rArr; conn_handle_list_get &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_battery_level_update
</UL>

<P><STRONG><a name="[a6]"></a>ble_conn_state_conn_idx</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_conn_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
</UL>

<P><STRONG><a name="[be]"></a>ble_conn_state_status</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_conn_state_status &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_battery_level_update
</UL>

<P><STRONG><a name="[c5]"></a>ble_conn_state_valid</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_status
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_idx
</UL>

<P><STRONG><a name="[c7]"></a>ble_dfu_buttonless_bootloader_start_finalize</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ble_dfu.o(i.ble_dfu_buttonless_bootloader_start_finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_dfu_buttonless_bootloader_start_finalize &rArr; nrf_pwr_mgmt_shutdown &rArr; nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_bootloader_start_prepare
</UL>

<P><STRONG><a name="[c9]"></a>ble_dfu_buttonless_bootloader_start_prepare</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_dfu_unbonded.o(i.ble_dfu_buttonless_bootloader_start_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_dfu_buttonless_bootloader_start_prepare &rArr; ble_dfu_buttonless_bootloader_start_finalize &rArr; nrf_pwr_mgmt_shutdown &rArr; nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_bootloader_start_finalize
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hvc
</UL>

<P><STRONG><a name="[49]"></a>ble_dfu_buttonless_on_ble_evt</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ble_dfu.o(i.ble_dfu_buttonless_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ble_dfu_buttonless_on_ble_evt &rArr; on_rw_authorize_req &rArr; on_ctrlpt_write &rArr; ble_dfu_buttonless_on_ctrl_pt_write &rArr; enter_bootloader &rArr; ble_dfu_buttonless_resp_send
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rw_authorize_req
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hvc
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_dfu.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[ce]"></a>ble_dfu_buttonless_on_ctrl_pt_write</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, ble_dfu_unbonded.o(i.ble_dfu_buttonless_on_ctrl_pt_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_dfu_buttonless_on_ctrl_pt_write &rArr; enter_bootloader &rArr; ble_dfu_buttonless_resp_send
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_name
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_bootloader
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_resp_send
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ctrlpt_write
</UL>

<P><STRONG><a name="[4c]"></a>ble_dfu_buttonless_on_sys_evt</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, ble_dfu_unbonded.o(i.ble_dfu_buttonless_on_sys_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_dfu_buttonless_on_sys_evt &rArr; ble_dfu_buttonless_resp_send
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_resp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_dfu_unbonded.o(sdh_soc_observers1)
</UL>
<P><STRONG><a name="[d2]"></a>ble_dfu_buttonless_resp_send</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, ble_dfu.o(i.ble_dfu_buttonless_resp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_dfu_buttonless_resp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_sys_evt
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_bootloader
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ctrl_pt_write
</UL>

<P><STRONG><a name="[d3]"></a>ble_dis_init</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, ble_dis.o(i.ble_dis_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ble_dis_init &rArr; char_add &rArr; characteristic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_id_encode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnp_id_encode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_service_init
</UL>

<P><STRONG><a name="[e3]"></a>ble_nus_init</STRONG> (Thumb, 260 bytes, Stack size 72 bytes, ble_nus.o(i.ble_nus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ble_nus_init &rArr; characteristic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[47]"></a>ble_nus_on_ble_evt</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ble_nus.o(i.ble_nus_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ble_nus_on_ble_evt &rArr; on_connect &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hvx_tx_complete
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[e7]"></a>ble_srv_ascii_to_utf8</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_srv_common.o(i.ble_srv_ascii_to_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_srv_ascii_to_utf8
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_service_init
</UL>

<P><STRONG><a name="[e9]"></a>ble_srv_is_indication_enabled</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_srv_common.o(i.ble_srv_is_indication_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_srv_is_indication_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ctrlpt_write
</UL>

<P><STRONG><a name="[eb]"></a>ble_srv_is_notification_enabled</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_srv_common.o(i.ble_srv_is_notification_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_srv_is_notification_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>

<P><STRONG><a name="[a1]"></a>ble_srv_report_ref_encode</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ble_srv_common.o(i.ble_srv_report_ref_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_srv_report_ref_encode &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_char_add
</UL>

<P><STRONG><a name="[f9]"></a>bsp_board_led_invert</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, boards.o(i.bsp_board_led_invert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_board_led_invert
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[f0]"></a>bsp_board_led_off</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, boards.o(i.bsp_board_led_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_board_led_off &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_off
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
</UL>

<P><STRONG><a name="[f2]"></a>bsp_board_led_on</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, boards.o(i.bsp_board_led_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_board_led_on &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_on
</UL>

<P><STRONG><a name="[f8]"></a>bsp_board_led_state_get</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, boards.o(i.bsp_board_led_state_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_board_led_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[f3]"></a>bsp_board_leds_off</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, boards.o(i.bsp_board_leds_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_board_leds_off &rArr; bsp_board_led_off &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_off
</UL>

<P><STRONG><a name="[f4]"></a>bsp_board_leds_on</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, boards.o(i.bsp_board_leds_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_board_leds_on &rArr; bsp_board_led_on &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[f5]"></a>bsp_board_pin_to_button_idx</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, boards.o(i.bsp_board_pin_to_button_idx))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
</UL>

<P><STRONG><a name="[7e]"></a>bsp_event_to_button_action_assign</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, bsp.o(i.bsp_event_to_button_action_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_buttons_configure
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_buttons_configure
</UL>

<P><STRONG><a name="[d7]"></a>bsp_indication_set</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bsp.o(i.bsp_indication_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[a0]"></a>characteristic_add</STRONG> (Thumb, 456 bytes, Stack size 80 bytes, ble_srv_common.o(i.characteristic_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = characteristic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_security_req
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_char_add
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
</UL>

<P><STRONG><a name="[c4]"></a>conn_handle_list_get</STRONG> (Thumb, 60 bytes, Stack size 64 bytes, ble_conn_state.o(i.conn_handle_list_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = conn_handle_list_get &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
</UL>

<P><STRONG><a name="[a2]"></a>descriptor_add</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, ble_srv_common.o(i.descriptor_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = descriptor_add
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_security_req
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_char_add
</UL>

<P><STRONG><a name="[101]"></a>dis_service_init</STRONG> (Thumb, 44 bytes, Stack size 72 bytes, dev_info_service.o(i.dis_service_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = dis_service_init &rArr; ble_dis_init &rArr; char_add &rArr; characteristic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_ascii_to_utf8
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[102]"></a>drv_rtc_compare_disable</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, drv_rtc.o(i.drv_rtc_compare_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = drv_rtc_compare_disable &rArr; evt_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_schedule
</UL>

<P><STRONG><a name="[104]"></a>drv_rtc_compare_pending</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, drv_rtc.o(i.drv_rtc_compare_pending))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = drv_rtc_compare_pending &rArr; evt_pending &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_pending
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_irq
</UL>

<P><STRONG><a name="[90]"></a>drv_rtc_compare_set</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, drv_rtc.o(i.drv_rtc_compare_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = drv_rtc_compare_set &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_enable
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_disable
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_enable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_disable
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_cc_set
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[8b]"></a>drv_rtc_counter_get</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_rtc.o(i.drv_rtc_counter_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv_rtc_counter_get
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_now
</UL>

<P><STRONG><a name="[8e]"></a>drv_rtc_init</STRONG> (Thumb, 164 bytes, Stack size 28 bytes, drv_rtc.o(i.drv_rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = drv_rtc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[196]"></a>drv_rtc_irq_trigger</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_rtc.o(i.drv_rtc_irq_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv_rtc_irq_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_schedule
</UL>

<P><STRONG><a name="[8f]"></a>drv_rtc_overflow_enable</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, drv_rtc.o(i.drv_rtc_overflow_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = drv_rtc_overflow_enable &rArr; evt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[10e]"></a>drv_rtc_overflow_pending</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_rtc.o(i.drv_rtc_overflow_pending))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = drv_rtc_overflow_pending &rArr; evt_pending &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_pending
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_irq
</UL>

<P><STRONG><a name="[10f]"></a>drv_rtc_start</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_rtc.o(i.drv_rtc_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv_rtc_start
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
</UL>

<P><STRONG><a name="[111]"></a>drv_rtc_stop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_rtc.o(i.drv_rtc_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv_rtc_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
</UL>

<P><STRONG><a name="[112]"></a>drv_rtc_windowed_compare_set</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, drv_rtc.o(i.drv_rtc_windowed_compare_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = drv_rtc_windowed_compare_set &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_sub
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_enable
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_counter_get
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_cc_set
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_enable
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_schedule
</UL>

<P><STRONG><a name="[37]"></a>gatt_evt_handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(i.gatt_evt_handler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.gatt_init)
</UL>
<P><STRONG><a name="[119]"></a>gatt_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, main.o(i.gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gatt_init &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_att_mtu_periph_set
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>init_timer</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.init_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_timer &rArr; app_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f]"></a>main</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = main &rArr; advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppi_Setting
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_management_init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_state_handle
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[8d]"></a>nrf_atfifo_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nrf_atfifo.o(i.nrf_atfifo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[135]"></a>nrf_atfifo_item_alloc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_req
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_schedule
</UL>

<P><STRONG><a name="[137]"></a>nrf_atfifo_item_free</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_free
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_process
</UL>

<P><STRONG><a name="[138]"></a>nrf_atfifo_item_get</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_req
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_process
</UL>

<P><STRONG><a name="[13a]"></a>nrf_atfifo_item_put</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_schedule
</UL>

<P><STRONG><a name="[116]"></a>nrf_atflags_clear</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_atflags.o(i.nrf_atflags_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_set_disconnected
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_invalidate
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_toggle
</UL>

<P><STRONG><a name="[c6]"></a>nrf_atflags_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_atflags.o(i.nrf_atflags_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_status
</UL>

<P><STRONG><a name="[e0]"></a>nrf_atflags_set</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_atflags.o(i.nrf_atflags_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_activate
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_toggle
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[13b]"></a>nrf_atomic_u32_and</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
</UL>

<P><STRONG><a name="[13e]"></a>nrf_atomic_u32_fetch_store</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
</UL>

<P><STRONG><a name="[13c]"></a>nrf_atomic_u32_or</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_set
</UL>

<P><STRONG><a name="[11b]"></a>nrf_ble_gatt_att_mtu_periph_set</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_att_mtu_periph_set))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
</UL>

<P><STRONG><a name="[11a]"></a>nrf_ble_gatt_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_ble_gatt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_init
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
</UL>

<P><STRONG><a name="[42]"></a>nrf_ble_gatt_on_ble_evt</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nrf_ble_gatt_on_ble_evt &rArr; on_data_length_update_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_rsp_evt
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected_evt
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_request_evt
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_evt
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[d8]"></a>nrf_ble_qwr_conn_handle_assign</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_ble_qwr.o(i.nrf_ble_qwr_conn_handle_assign))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[191]"></a>nrf_ble_qwr_init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, nrf_ble_qwr.o(i.nrf_ble_qwr_init))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[48]"></a>nrf_ble_qwr_on_ble_evt</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, nrf_ble_qwr.o(i.nrf_ble_qwr_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_ble_qwr_on_ble_evt &rArr; on_rw_authorize_request
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mem_reply
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_user_mem_request
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_user_mem_release
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rw_authorize_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[14c]"></a>nrf_drv_clock_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_clock_init &rArr; nrfx_clock_enable &rArr; nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[150]"></a>nrf_drv_clock_lfclk_release</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_lfclk_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_clock_lfclk_release &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_stop
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[185]"></a>nrf_drv_ppi_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_init))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppi_Setting
</UL>

<P><STRONG><a name="[154]"></a>nrf_pwr_mgmt_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_pwr_mgmt_init &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_management_init
</UL>

<P><STRONG><a name="[11d]"></a>nrf_pwr_mgmt_run</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_pwr_mgmt_run &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_state_handle
</UL>

<P><STRONG><a name="[c8]"></a>nrf_pwr_mgmt_shutdown</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_pwr_mgmt_shutdown &rArr; nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_process
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mtx_unlock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_bootloader_start_finalize
</UL>

<P><STRONG><a name="[158]"></a>nrf_sdh_ble_app_ram_start_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_app_ram_start_get))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
</UL>

<P><STRONG><a name="[ee]"></a>nrf_sdh_ble_default_cfg_set</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_default_cfg_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_sdh_ble_default_cfg_set
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_app_ram_start_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[ef]"></a>nrf_sdh_ble_enable</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_sdh_ble_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[ed]"></a>nrf_sdh_enable_request</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, nrf_sdh.o(i.nrf_sdh_enable_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_sdh_enable_request &rArr; sdh_state_observer_notify &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[66]"></a>nrf_sdh_evts_poll</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nrf_sdh.o(i.nrf_sdh_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_sdh_evts_poll &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
</UL>

<P><STRONG><a name="[14e]"></a>nrf_sdh_is_enabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_sdh.o(i.nrf_sdh_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_process
</UL>

<P><STRONG><a name="[155]"></a>nrf_section_iter_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_section_iter.o(i.nrf_section_iter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_item_set
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>

<P><STRONG><a name="[159]"></a>nrf_section_iter_next</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrf_section_iter.o(i.nrf_section_iter_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_section_iter_next
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_item_set
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_process
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>

<P><STRONG><a name="[18c]"></a>nrf_sortlist_add</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nrf_sortlist.o(i.nrf_sortlist_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_sortlist_add
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_process
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expire
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
</UL>

<P><STRONG><a name="[18b]"></a>nrf_sortlist_peek</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_sortlist.o(i.nrf_sortlist_peek))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
</UL>

<P><STRONG><a name="[194]"></a>nrf_sortlist_pop</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_sortlist.o(i.nrf_sortlist_pop))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sortlist_pop
</UL>

<P><STRONG><a name="[195]"></a>nrf_sortlist_remove</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrf_sortlist.o(i.nrf_sortlist_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_sortlist_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_process
</UL>

<P><STRONG><a name="[14f]"></a>nrfx_clock_enable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrfx_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_clock_enable &rArr; nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_clock_irq_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[14d]"></a>nrfx_clock_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrfx_clock_init))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[12f]"></a>nrfx_clock_lfclk_stop</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrfx_clock_lfclk_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_clock_lfclk_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_stop
</UL>

<P><STRONG><a name="[161]"></a>nrfx_gpiote_init</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, nrfx_gpiote.o(i.nrfx_gpiote_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrfx_gpiote_init &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_clear
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_int_enable
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_free
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppi_Setting
</UL>

<P><STRONG><a name="[128]"></a>nrfx_gpiote_out_init</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, nrfx_gpiote.o(i.nrfx_gpiote_out_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = nrfx_gpiote_out_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_configured_set
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blinking_setup
</UL>

<P><STRONG><a name="[12a]"></a>nrfx_gpiote_out_task_addr_get</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrfx_gpiote.o(i.nrfx_gpiote_out_task_addr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_gpiote_out_task_addr_get
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_task_addr_get
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blinking_setup
</UL>

<P><STRONG><a name="[12d]"></a>nrfx_gpiote_out_task_enable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.nrfx_gpiote_out_task_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_gpiote_out_task_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blinking_setup
</UL>

<P><STRONG><a name="[129]"></a>nrfx_ppi_channel_alloc</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, nrfx_ppi.o(i.nrfx_ppi_channel_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrfx_ppi_channel_alloc &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_ppi_channel_to_mask
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blinking_setup
</UL>

<P><STRONG><a name="[12b]"></a>nrfx_ppi_channel_assign</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, nrfx_ppi.o(i.nrfx_ppi_channel_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_ppi_channel_assign &rArr; is_programmable_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_programmable_app_channel
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blinking_setup
</UL>

<P><STRONG><a name="[12c]"></a>nrfx_ppi_channel_enable</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nrfx_ppi.o(i.nrfx_ppi_channel_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_ppi_channel_enable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_programmable_app_channel
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_app_channel
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blinking_setup
</UL>

<P><STRONG><a name="[16c]"></a>nrfx_timer_compare</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, nrfx_timer.o(i.nrfx_timer_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrfx_timer_compare &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_int_enable
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_int_disable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_int_get
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_event_get
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_extended_compare
</UL>

<P><STRONG><a name="[76]"></a>nrfx_timer_disable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrfx_timer.o(i.nrfx_timer_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_timer_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_To1Second
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Disable
</UL>

<P><STRONG><a name="[79]"></a>nrfx_timer_enable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrfx_timer.o(i.nrfx_timer_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_timer_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppi_Setting
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_TohalfSecond
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_To1Second
</UL>

<P><STRONG><a name="[78]"></a>nrfx_timer_extended_compare</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, nrfx_timer.o(i.nrfx_timer_extended_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_timer_extended_compare &rArr; nrfx_timer_compare &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_compare
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_shorts_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blinking_setup
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_TohalfSecond
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_To1Second
</UL>

<P><STRONG><a name="[171]"></a>nrfx_timer_init</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, nrfx_timer.o(i.nrfx_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrfx_timer_init &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_event_get
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppi_Setting
</UL>

<P><STRONG><a name="[152]"></a>nrfx_uart_tx</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, nrfx_uart.o(i.nrfx_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx_in_progress
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_blocking
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[97]"></a>nrfx_uart_tx_in_progress</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrfx_uart_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>

<P><STRONG><a name="[151]"></a>nrfx_uarte_tx</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, nrfx_uarte.o(i.nrfx_uarte_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrfx_uarte_tx &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx_in_progress
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_task_trigger
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[96]"></a>nrfx_uarte_tx_in_progress</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_uarte_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
</UL>

<P><STRONG><a name="[132]"></a>ppi_Setting</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ppi_gpiote.o(i.ppi_Setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ppi_Setting &rArr; led_blinking_setup &rArr; nrfx_gpiote_out_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blinking_setup
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b]"></a>timer_dummy_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ppi_gpiote.o(i.timer_dummy_handler))
<BR>[Address Reference Count : 1]<UL><LI> ppi_gpiote.o(i.ppi_Setting)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7f]"></a>advertising_init</STRONG> (Thumb, 118 bytes, Stack size 184 bytes, main.o(i.advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_conn_cfg_tag_set
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>advertising_start</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(i.advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = advertising_start &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTimer_handler
</UL>

<P><STRONG><a name="[3e]"></a>battery_level_meas_timeout_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(i.battery_level_meas_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = battery_level_meas_timeout_handler &rArr; battery_level_update &rArr; ble_bas_battery_level_update &rArr; ble_conn_state_conn_handles &rArr; conn_handle_list_get &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.timers_init)
</UL>
<P><STRONG><a name="[a3]"></a>battery_level_update</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(i.battery_level_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = battery_level_update &rArr; ble_bas_battery_level_update &rArr; ble_conn_state_conn_handles &rArr; conn_handle_list_get &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_battery_level_update
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_meas_timeout_handler
</UL>

<P><STRONG><a name="[4a]"></a>ble_evt_handler</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, main.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ble_evt_handler &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_conn_handle_assign
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ble_observers3)
</UL>
<P><STRONG><a name="[ec]"></a>ble_stack_init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, main.o(i.ble_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_stack_init &rArr; nrf_sdh_enable_request &rArr; sdh_state_observer_notify &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36]"></a>conn_params_error_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.conn_params_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = conn_params_error_handler &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.conn_params_init)
</UL>
<P><STRONG><a name="[fe]"></a>conn_params_init</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, main.o(i.conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = conn_params_init &rArr; ble_conn_params_init &rArr; app_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[118]"></a>gap_params_init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, main.o(i.gap_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gap_params_init &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11c]"></a>idle_state_handle</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i.idle_state_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = idle_state_handle &rArr; nrf_pwr_mgmt_run &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[130]"></a>log_init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(i.log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = log_init &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>nrf_qwr_error_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.nrf_qwr_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_qwr_error_handler &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.services_init)
</UL>
<P><STRONG><a name="[3d]"></a>nus_data_handler</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, main.o(i.nus_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = nus_data_handler &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.services_init)
</UL>
<P><STRONG><a name="[32]"></a>on_adv_evt</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, main.o(i.on_adv_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = on_adv_evt &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_TohalfSecond
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_To1Second
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.advertising_init)
</UL>
<P><STRONG><a name="[35]"></a>on_conn_params_evt</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, main.o(i.on_conn_params_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_conn_params_evt &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.conn_params_init)
</UL>
<P><STRONG><a name="[133]"></a>power_management_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(i.power_management_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = power_management_init &rArr; nrf_pwr_mgmt_init &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[134]"></a>services_init</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, main.o(i.services_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = services_init &rArr; dis_service_init &rArr; ble_dis_init &rArr; char_add &rArr; characteristic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_service_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[131]"></a>timers_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, main.o(i.timers_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = timers_init &rArr; app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[127]"></a>led_blinking_setup</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, ppi_gpiote.o(i.led_blinking_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = led_blinking_setup &rArr; nrfx_gpiote_out_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_ppi_channel_assign
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_ppi_channel_alloc
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_task_enable
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_task_addr_get
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_extended_compare
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_ppi_channel_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppi_Setting
</UL>

<P><STRONG><a name="[f1]"></a>nrf_gpio_pin_write</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, boards.o(i.nrf_gpio_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>

<P><STRONG><a name="[3f]"></a>bsp_button_event_handler</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, bsp.o(i.bsp_button_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bsp_button_event_handler &rArr; app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_pin_to_button_idx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>bsp_led_indication</STRONG> (Thumb, 882 bytes, Stack size 32 bytes, bsp.o(i.bsp_led_indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bsp_led_indication &rArr; app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_off
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_on
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_state_get
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_invert
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
</UL>

<P><STRONG><a name="[f7]"></a>leds_off</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp.o(i.leds_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = leds_off &rArr; bsp_board_leds_off &rArr; bsp_board_led_off &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[7d]"></a>advertising_buttons_configure</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, bsp_btn_ble.o(i.advertising_buttons_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = advertising_buttons_configure &rArr; bsp_event_to_button_action_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[44]"></a>ble_evt_handler</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, bsp_btn_ble.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ble_evt_handler &rArr; connection_buttons_configure &rArr; bsp_event_to_button_action_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_buttons_configure
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_buttons_configure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_btn_ble.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[d9]"></a>connection_buttons_configure</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, bsp_btn_ble.o(i.connection_buttons_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = connection_buttons_configure &rArr; bsp_event_to_button_action_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[9d]"></a>appearance_encode</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ble_advdata.o(i.appearance_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = appearance_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[a8]"></a>ble_device_addr_encode</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ble_advdata.o(i.ble_device_addr_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_device_addr_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[fd]"></a>conn_int_check</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ble_advdata.o(i.conn_int_check))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
</UL>

<P><STRONG><a name="[ac]"></a>conn_int_encode</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ble_advdata.o(i.conn_int_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = conn_int_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_check
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[a9]"></a>flags_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ble_advdata.o(i.flags_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = flags_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[ad]"></a>manuf_specific_data_encode</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ble_advdata.o(i.manuf_specific_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = manuf_specific_data_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[af]"></a>name_encode</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, ble_advdata.o(i.name_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = name_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[ae]"></a>service_data_encode</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, ble_advdata.o(i.service_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = service_data_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[aa]"></a>tx_power_level_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ble_advdata.o(i.tx_power_level_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tx_power_level_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[9e]"></a>uint16_encode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_advdata.o(i.uint16_encode))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appearance_encode
</UL>

<P><STRONG><a name="[ab]"></a>uuid_list_encode</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, ble_advdata.o(i.uuid_list_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[198]"></a>uuid_list_sized_encode</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, ble_advdata.o(i.uuid_list_sized_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
</UL>

<P><STRONG><a name="[7c]"></a>addr_is_valid</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_advertising.o(i.addr_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_mode_next_avail_get
</UL>

<P><STRONG><a name="[7b]"></a>adv_mode_next_avail_get</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ble_advertising.o(i.adv_mode_next_avail_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adv_mode_next_avail_get
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[183]"></a>adv_mode_next_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_advertising.o(i.adv_mode_next_get))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_terminated
</UL>

<P><STRONG><a name="[b4]"></a>adv_set_data_size_max_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_advertising.o(i.adv_set_data_size_max_get))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[b2]"></a>config_is_valid</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ble_advertising.o(i.config_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[117]"></a>flags_set</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_advertising.o(i.flags_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_slow
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_fast
</UL>

<P><STRONG><a name="[b5]"></a>on_connected</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_advertising.o(i.on_connected))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>

<P><STRONG><a name="[b6]"></a>on_disconnected</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ble_advertising.o(i.on_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = on_disconnected &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>

<P><STRONG><a name="[b7]"></a>on_terminated</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ble_advertising.o(i.on_terminated))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = on_terminated &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_mode_next_get
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>

<P><STRONG><a name="[b8]"></a>phy_is_valid</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_advertising.o(i.phy_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[ba]"></a>set_adv_mode_directed</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ble_advertising.o(i.set_adv_mode_directed))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[b9]"></a>set_adv_mode_directed_high_duty</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ble_advertising.o(i.set_adv_mode_directed_high_duty))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[bb]"></a>set_adv_mode_fast</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ble_advertising.o(i.set_adv_mode_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = set_adv_mode_fast &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use_whitelist
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[bc]"></a>set_adv_mode_slow</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ble_advertising.o(i.set_adv_mode_slow))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = set_adv_mode_slow &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use_whitelist
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[192]"></a>use_whitelist</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ble_advertising.o(i.use_whitelist))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = use_whitelist
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whitelist_has_entries
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_slow
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_fast
</UL>

<P><STRONG><a name="[197]"></a>whitelist_has_entries</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_advertising.o(i.whitelist_has_entries))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use_whitelist
</UL>

<P><STRONG><a name="[45]"></a>ble_evt_handler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ble_conn_params.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ble_evt_handler &rArr; on_write &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[ff]"></a>conn_params_negotiation</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ble_conn_params.o(i.conn_params_negotiation))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = conn_params_negotiation &rArr; app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>

<P><STRONG><a name="[17f]"></a>instance_get</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ble_conn_params.o(i.instance_get))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout_handler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>

<P><STRONG><a name="[180]"></a>is_conn_params_ok</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ble_conn_params.o(i.is_conn_params_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = is_conn_params_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>

<P><STRONG><a name="[dd]"></a>on_conn_params_update</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ble_conn_params.o(i.on_conn_params_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = on_conn_params_update &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[da]"></a>on_connect</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ble_conn_params.o(i.on_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = on_connect &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[db]"></a>on_disconnect</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ble_conn_params.o(i.on_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = on_disconnect &rArr; app_timer_stop &rArr; timer_req_schedule &rArr; nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[dc]"></a>on_write</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ble_conn_params.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = on_write &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[100]"></a>send_error_evt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_conn_params.o(i.send_error_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = send_error_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout_handler
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_update_request
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>

<P><STRONG><a name="[190]"></a>send_update_request</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ble_conn_params.o(i.send_update_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = send_update_request &rArr; send_error_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout_handler
</UL>

<P><STRONG><a name="[34]"></a>update_timeout_handler</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ble_conn_params.o(i.update_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = update_timeout_handler &rArr; send_update_request &rArr; send_error_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_update_request
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P><STRONG><a name="[41]"></a>ble_evt_handler</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, ble_conn_state.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ble_evt_handler &rArr; record_purge_disconnected &rArr; conn_handle_list_get &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_set
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_set_disconnected
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_activate
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_state.o(sdh_ble_observers0)
</UL>
<P><STRONG><a name="[e2]"></a>flag_toggle</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ble_conn_state.o(i.flag_toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = flag_toggle &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_set
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[df]"></a>record_activate</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ble_conn_state.o(i.record_activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = record_activate &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[186]"></a>record_invalidate</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ble_conn_state.o(i.record_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = record_invalidate &rArr; nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
</UL>

<P><STRONG><a name="[de]"></a>record_purge_disconnected</STRONG> (Thumb, 66 bytes, Stack size 104 bytes, ble_conn_state.o(i.record_purge_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = record_purge_disconnected &rArr; conn_handle_list_get &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_invalidate
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[e1]"></a>record_set_disconnected</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_conn_state.o(i.record_set_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = record_set_disconnected &rArr; nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[fa]"></a>set_security_req</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, ble_srv_common.o(i.set_security_req))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;descriptor_add
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
</UL>

<P><STRONG><a name="[ea]"></a>uint16_decode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_srv_common.o(i.uint16_decode))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_indication_enabled
</UL>

<P><STRONG><a name="[181]"></a>data_length_update</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, nrf_ble_gatt.o(i.data_length_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = data_length_update
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_request_evt
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
</UL>

<P><STRONG><a name="[141]"></a>link_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_ble_gatt.o(i.link_init))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected_evt
</UL>

<P><STRONG><a name="[142]"></a>on_connected_evt</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, nrf_ble_gatt.o(i.on_connected_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = on_connected_evt &rArr; data_length_update
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[146]"></a>on_data_length_update_evt</STRONG> (Thumb, 78 bytes, Stack size 72 bytes, nrf_ble_gatt.o(i.on_data_length_update_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = on_data_length_update_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[147]"></a>on_data_length_update_request_evt</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, nrf_ble_gatt.o(i.on_data_length_update_request_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = on_data_length_update_request_evt &rArr; data_length_update
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[143]"></a>on_disconnected_evt</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_ble_gatt.o(i.on_disconnected_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_disconnected_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[145]"></a>on_exchange_mtu_request_evt</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, nrf_ble_gatt.o(i.on_exchange_mtu_request_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_exchange_mtu_request_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[144]"></a>on_exchange_mtu_rsp_evt</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, nrf_ble_gatt.o(i.on_exchange_mtu_rsp_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = on_exchange_mtu_rsp_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[14b]"></a>on_rw_authorize_request</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, nrf_ble_qwr.o(i.on_rw_authorize_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_rw_authorize_request
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_on_ble_evt
</UL>

<P><STRONG><a name="[14a]"></a>on_user_mem_release</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_ble_qwr.o(i.on_user_mem_release))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_on_ble_evt
</UL>

<P><STRONG><a name="[149]"></a>on_user_mem_request</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrf_ble_qwr.o(i.on_user_mem_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = on_user_mem_request &rArr; user_mem_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mem_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_on_ble_evt
</UL>

<P><STRONG><a name="[148]"></a>user_mem_reply</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nrf_ble_qwr.o(i.user_mem_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = user_mem_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_on_ble_evt
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_user_mem_request
</UL>

<P><STRONG><a name="[e4]"></a>on_connect</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, ble_nus.o(i.on_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = on_connect &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>

<P><STRONG><a name="[e6]"></a>on_hvx_tx_complete</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, ble_nus.o(i.on_hvx_tx_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = on_hvx_tx_complete &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>

<P><STRONG><a name="[e5]"></a>on_write</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, ble_nus.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = on_write &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>

<P><STRONG><a name="[d4]"></a>char_add</STRONG> (Thumb, 138 bytes, Stack size 64 bytes, ble_dis.o(i.char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = char_add &rArr; characteristic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
</UL>

<P><STRONG><a name="[d6]"></a>pnp_id_encode</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, ble_dis.o(i.pnp_id_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pnp_id_encode &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
</UL>

<P><STRONG><a name="[d5]"></a>sys_id_encode</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ble_dis.o(i.sys_id_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sys_id_encode &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
</UL>

<P><STRONG><a name="[184]"></a>uint16_encode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_dis.o(i.uint16_encode))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnp_id_encode
</UL>

<P><STRONG><a name="[9f]"></a>battery_level_char_add</STRONG> (Thumb, 180 bytes, Stack size 80 bytes, ble_bas.o(i.battery_level_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = battery_level_char_add &rArr; characteristic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;descriptor_add
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_report_ref_encode
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_init
</UL>

<P><STRONG><a name="[bf]"></a>battery_notification_send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_bas.o(i.battery_notification_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = battery_notification_send
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_battery_level_update
</UL>

<P><STRONG><a name="[c1]"></a>on_write</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ble_bas.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_write &rArr; ble_srv_is_notification_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_on_ble_evt
</UL>

<P><STRONG><a name="[fb]"></a>clock_clk_started_notify</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.clock_clk_started_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_evt_handler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_irq_handler
</UL>

<P><STRONG><a name="[39]"></a>clock_irq_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.clock_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = clock_irq_handler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(i.nrf_drv_clock_init)
</UL>
<P><STRONG><a name="[fc]"></a>item_dequeue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.item_dequeue))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>

<P><STRONG><a name="[12e]"></a>lfclk_stop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.lfclk_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lfclk_stop &rArr; nrfx_clock_lfclk_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
</UL>

<P><STRONG><a name="[4f]"></a>sd_state_evt_handler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.sd_state_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sd_state_evt_handler &rArr; nrf_drv_clock_init &rArr; nrfx_clock_enable &rArr; nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[4b]"></a>soc_evt_handler</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.soc_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = soc_evt_handler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(sdh_soc_observers0)
</UL>
<P><STRONG><a name="[63]"></a>nrf_clock_event_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[64]"></a>nrf_clock_event_clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrf_clock_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[65]"></a>nrf_clock_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[160]"></a>nrf_clock_task_trigger</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_stop
</UL>

<P><STRONG><a name="[16b]"></a>nrfx_get_irq_number</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrfx_get_irq_number))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_clock_irq_init
</UL>

<P><STRONG><a name="[15f]"></a>nrfx_power_clock_irq_init</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, nrfx_clock.o(i.nrfx_power_clock_irq_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
</UL>

<P><STRONG><a name="[163]"></a>channel_free</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.channel_free))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
</UL>

<P><STRONG><a name="[5e]"></a>channel_handler_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.channel_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[165]"></a>channel_port_alloc</STRONG> (Thumb, 122 bytes, Stack size 36 bytes, nrfx_gpiote.o(i.channel_port_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_init
</UL>

<P><STRONG><a name="[60]"></a>channel_port_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_task_addr_get
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[5f]"></a>nrf_bitmask_bit_is_set</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, nrfx_gpiote.o(i.nrf_bitmask_bit_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_bitmask_bit_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[61]"></a>nrf_bitmask_bit_set</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, nrfx_gpiote.o(i.nrf_bitmask_bit_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_bitmask_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_configured_set
</UL>

<P><STRONG><a name="[168]"></a>nrf_gpio_cfg</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, nrfx_gpiote.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_init
</UL>

<P><STRONG><a name="[62]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_cfg_sense_set
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[167]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_init
</UL>

<P><STRONG><a name="[166]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_init
</UL>

<P><STRONG><a name="[5d]"></a>nrf_gpio_ports_read</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrfx_gpiote.o(i.nrf_gpio_ports_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_ports_read
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[153]"></a>nrf_gpiote_event_addr_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_addr_get))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
</UL>

<P><STRONG><a name="[5c]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[5b]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_is_set
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[164]"></a>nrf_gpiote_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpiote_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
</UL>

<P><STRONG><a name="[16a]"></a>nrf_gpiote_task_addr_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpiote_task_addr_get))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_task_addr_get
</UL>

<P><STRONG><a name="[169]"></a>pin_configured_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.pin_configured_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pin_configured_set &rArr; nrf_bitmask_bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_init
</UL>

<P><STRONG><a name="[162]"></a>pin_in_use_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.pin_in_use_clear))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
</UL>

<P><STRONG><a name="[177]"></a>nrf_uart_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_blocking
</UL>

<P><STRONG><a name="[173]"></a>nrf_uart_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_uart.o(i.nrf_uart_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
</UL>

<P><STRONG><a name="[174]"></a>nrf_uart_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>

<P><STRONG><a name="[176]"></a>tx_blocking</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nrfx_uart.o(i.tx_blocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>

<P><STRONG><a name="[175]"></a>tx_byte</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nrfx_uart.o(i.tx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_blocking
</UL>

<P><STRONG><a name="[17b]"></a>nrf_uarte_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
</UL>

<P><STRONG><a name="[179]"></a>nrf_uarte_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_uarte.o(i.nrf_uarte_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uarte_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
</UL>

<P><STRONG><a name="[17a]"></a>nrf_uarte_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
</UL>

<P><STRONG><a name="[178]"></a>nrfx_is_in_ram</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_is_in_ram))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
</UL>

<P><STRONG><a name="[74]"></a>irq_handler</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, nrfx_timer.o(i.irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = irq_handler &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_int_get
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_event_get
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[11f]"></a>nrf_timer_compare_event_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_timer.o(i.nrf_timer_compare_event_get))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_compare
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[120]"></a>nrf_timer_compare_int_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_timer.o(i.nrf_timer_compare_int_get))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_compare
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[121]"></a>nrf_timer_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_timer.o(i.nrf_timer_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_timer_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_compare
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[16e]"></a>nrf_timer_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_timer.o(i.nrf_timer_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_compare
</UL>

<P><STRONG><a name="[16d]"></a>nrf_timer_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_timer.o(i.nrf_timer_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_compare
</UL>

<P><STRONG><a name="[170]"></a>nrf_timer_shorts_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_timer.o(i.nrf_timer_shorts_disable))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_extended_compare
</UL>

<P><STRONG><a name="[16f]"></a>nrf_timer_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_timer.o(i.nrf_timer_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_enable
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_disable
</UL>

<P><STRONG><a name="[172]"></a>nrfx_get_irq_number</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_timer.o(i.nrfx_get_irq_number))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_init
</UL>

<P><STRONG><a name="[125]"></a>are_app_channels</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_ppi.o(i.are_app_channels))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_app_channel
</UL>

<P><STRONG><a name="[122]"></a>is_allocated_channel</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrfx_ppi.o(i.is_allocated_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_allocated_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_ppi_channel_to_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_ppi_channel_assign
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_ppi_channel_alloc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_ppi_channel_enable
</UL>

<P><STRONG><a name="[124]"></a>is_app_channel</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrfx_ppi.o(i.is_app_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_ppi_channel_to_mask
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_app_channels
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_ppi_channel_enable
</UL>

<P><STRONG><a name="[126]"></a>is_programmable_app_channel</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrfx_ppi.o(i.is_programmable_app_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_programmable_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_ppi_channel_to_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_ppi_channel_assign
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_ppi_channel_enable
</UL>

<P><STRONG><a name="[123]"></a>nrfx_ppi_channel_to_mask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_ppi.o(i.nrfx_ppi_channel_to_mask))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_ppi_channel_alloc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_programmable_app_channel
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_app_channel
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_channel
</UL>

<P><STRONG><a name="[87]"></a>fifo_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_fifo.o(i.fifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fifo_get &rArr; fifo_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_peek
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>

<P><STRONG><a name="[86]"></a>fifo_length</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_fifo.o(i.fifo_length))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>

<P><STRONG><a name="[115]"></a>fifo_peek</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_fifo.o(i.fifo_peek))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fifo_peek
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_get
</UL>

<P><STRONG><a name="[89]"></a>fifo_put</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_fifo.o(i.fifo_put))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
</UL>

<P><STRONG><a name="[40]"></a>compare_func</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, app_timer2.o(i.compare_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = compare_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_timer2.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>get_now</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, app_timer2.o(i.get_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_now &rArr; drv_rtc_counter_get
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expire
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_schedule
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_compare1_evt
</UL>

<P><STRONG><a name="[17c]"></a>on_compare1_evt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_timer2.o(i.on_compare1_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = on_compare1_evt &rArr; get_now &rArr; drv_rtc_counter_get
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_now
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_irq
</UL>

<P><STRONG><a name="[17d]"></a>on_compare_evt</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_timer2.o(i.on_compare_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = on_compare_evt &rArr; timer_expire &rArr; get_now &rArr; drv_rtc_counter_get
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expire
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_irq
</UL>

<P><STRONG><a name="[187]"></a>on_overflow_evt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_timer2.o(i.on_overflow_evt))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_irq
</UL>

<P><STRONG><a name="[33]"></a>rtc_irq</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, app_timer2.o(i.rtc_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rtc_irq &rArr; rtc_update &rArr; rtc_schedule &rArr; drv_rtc_windowed_compare_set &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_overflow_pending
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_pending
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_process
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_overflow_evt
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_compare_evt
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_compare1_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_timer2.o(i.app_timer_init)
</UL>
<P><STRONG><a name="[18a]"></a>rtc_schedule</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, app_timer2.o(i.rtc_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rtc_schedule &rArr; drv_rtc_windowed_compare_set &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_windowed_compare_set
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_disable
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expire
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_now
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
</UL>

<P><STRONG><a name="[189]"></a>rtc_update</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, app_timer2.o(i.rtc_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rtc_update &rArr; rtc_schedule &rArr; drv_rtc_windowed_compare_set &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_peek
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_add
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_stop
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_start
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sortlist_pop
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_irq
</UL>

<P><STRONG><a name="[193]"></a>sorted_list_stop_all</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_timer2.o(i.sorted_list_stop_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sorted_list_stop_all &rArr; sortlist_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sortlist_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_process
</UL>

<P><STRONG><a name="[18d]"></a>sortlist_pop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_timer2.o(i.sortlist_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sortlist_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sorted_list_stop_all
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
</UL>

<P><STRONG><a name="[17e]"></a>timer_expire</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, app_timer2.o(i.timer_expire))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer_expire &rArr; get_now &rArr; drv_rtc_counter_get
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_add
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_now
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_schedule
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_compare_evt
</UL>

<P><STRONG><a name="[188]"></a>timer_req_process</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, app_timer2.o(i.timer_req_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer_req_process &rArr; nrf_sortlist_add
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_remove
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_add
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sorted_list_stop_all
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_irq
</UL>

<P><STRONG><a name="[93]"></a>timer_req_schedule</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, app_timer2.o(i.timer_req_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer_req_schedule &rArr; nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_irq_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>

<P><STRONG><a name="[98]"></a>nrf_drv_uart_tx</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, app_uart_fifo.o(i.nrf_drv_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>

<P><STRONG><a name="[9c]"></a>__sd_nvic_irq_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_util_platform.o(i.__sd_nvic_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_critical_region_enter
</UL>

<P><STRONG><a name="[9a]"></a>sd_nvic_critical_region_enter</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, app_util_platform.o(i.sd_nvic_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>

<P><STRONG><a name="[103]"></a>evt_disable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, drv_rtc.o(i.evt_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_disable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_windowed_compare_set
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_disable
</UL>

<P><STRONG><a name="[10d]"></a>evt_enable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_rtc.o(i.evt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_enable
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_windowed_compare_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_overflow_enable
</UL>

<P><STRONG><a name="[105]"></a>evt_pending</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_rtc.o(i.evt_pending))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = evt_pending &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_overflow_pending
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_pending
</UL>

<P><STRONG><a name="[109]"></a>nrf_rtc_cc_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_rtc.o(i.nrf_rtc_cc_set))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_windowed_compare_set
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_set
</UL>

<P><STRONG><a name="[10c]"></a>nrf_rtc_counter_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_rtc.o(i.nrf_rtc_counter_get))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_windowed_compare_set
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_counter_get
</UL>

<P><STRONG><a name="[108]"></a>nrf_rtc_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_rtc.o(i.nrf_rtc_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_pending
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_windowed_compare_set
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_set
</UL>

<P><STRONG><a name="[107]"></a>nrf_rtc_event_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_rtc.o(i.nrf_rtc_event_disable))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_disable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_set
</UL>

<P><STRONG><a name="[10a]"></a>nrf_rtc_event_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_rtc.o(i.nrf_rtc_event_enable))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_enable
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_windowed_compare_set
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_set
</UL>

<P><STRONG><a name="[106]"></a>nrf_rtc_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_rtc.o(i.nrf_rtc_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_disable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_set
</UL>

<P><STRONG><a name="[10b]"></a>nrf_rtc_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_rtc.o(i.nrf_rtc_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_enable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_set
</UL>

<P><STRONG><a name="[110]"></a>nrf_rtc_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_rtc.o(i.nrf_rtc_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_stop
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_start
</UL>

<P><STRONG><a name="[114]"></a>nrfx_coredep_delay_us</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, drv_rtc.o(i.nrfx_coredep_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_windowed_compare_set
</UL>

<P><STRONG><a name="[113]"></a>ticks_sub</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_rtc.o(i.ticks_sub))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_windowed_compare_set
</UL>

<P><STRONG><a name="[156]"></a>nrf_mtx_unlock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_pwr_mgmt.o(i.nrf_mtx_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
</UL>

<P><STRONG><a name="[157]"></a>shutdown_process</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, nrf_pwr_mgmt.o(i.shutdown_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shutdown_process &rArr; nrf_section_iter_next
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
</UL>

<P><STRONG><a name="[15e]"></a>nrf_section_iter_item_set</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, nrf_section_iter.o(i.nrf_section_iter_item_set))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>

<P><STRONG><a name="[18f]"></a>__sd_nvic_app_accessible_irq</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, nrf_sdh.o(i.__sd_nvic_app_accessible_irq))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
</UL>

<P><STRONG><a name="[15d]"></a>nrf_section_iter_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_sdh.o(i.nrf_section_iter_get))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>

<P><STRONG><a name="[18e]"></a>sd_nvic_EnableIRQ</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, nrf_sdh.o(i.sd_nvic_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sd_nvic_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
</UL>

<P><STRONG><a name="[15a]"></a>sdh_request_observer_notify</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, nrf_sdh.o(i.sdh_request_observer_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sdh_request_observer_notify &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
</UL>

<P><STRONG><a name="[15b]"></a>sdh_state_observer_notify</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, nrf_sdh.o(i.sdh_state_observer_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sdh_state_observer_notify &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
</UL>

<P><STRONG><a name="[15c]"></a>softdevices_evt_irq_enable</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_sdh.o(i.softdevices_evt_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = softdevices_evt_irq_enable &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
</UL>

<P><STRONG><a name="[4d]"></a>nrf_sdh_ble_evts_poll</STRONG> (Thumb, 108 bytes, Stack size 544 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = nrf_sdh_ble_evts_poll &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_ble.o(sdh_stack_observers0)
</UL>
<P><STRONG><a name="[4e]"></a>nrf_sdh_soc_evts_poll</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, nrf_sdh_soc.o(i.nrf_sdh_soc_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_sdh_soc_evts_poll &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_soc.o(sdh_stack_observers0)
</UL>
<P><STRONG><a name="[ca]"></a>on_connect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_dfu.o(i.on_connect))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ble_evt
</UL>

<P><STRONG><a name="[182]"></a>on_ctrlpt_write</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, ble_dfu.o(i.on_ctrlpt_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = on_ctrlpt_write &rArr; ble_dfu_buttonless_on_ctrl_pt_write &rArr; enter_bootloader &rArr; ble_dfu_buttonless_resp_send
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_indication_enabled
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ctrl_pt_write
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rw_authorize_req
</UL>

<P><STRONG><a name="[cb]"></a>on_disconnect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_dfu.o(i.on_disconnect))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ble_evt
</UL>

<P><STRONG><a name="[cd]"></a>on_hvc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_dfu.o(i.on_hvc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = on_hvc &rArr; ble_dfu_buttonless_bootloader_start_prepare &rArr; ble_dfu_buttonless_bootloader_start_finalize &rArr; nrf_pwr_mgmt_shutdown &rArr; nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_bootloader_start_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ble_evt
</UL>

<P><STRONG><a name="[cc]"></a>on_rw_authorize_req</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ble_dfu.o(i.on_rw_authorize_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = on_rw_authorize_req &rArr; on_ctrlpt_write &rArr; ble_dfu_buttonless_on_ctrl_pt_write &rArr; enter_bootloader &rArr; ble_dfu_buttonless_resp_send
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ctrlpt_write
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ble_evt
</UL>

<P><STRONG><a name="[cf]"></a>enter_bootloader</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ble_dfu_unbonded.o(i.enter_bootloader))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = enter_bootloader &rArr; ble_dfu_buttonless_resp_send
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_resp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ctrl_pt_write
</UL>

<P><STRONG><a name="[d1]"></a>set_adv_name</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ble_dfu_unbonded.o(i.set_adv_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_adv_name
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ctrl_pt_write
</UL>

<P><STRONG><a name="[70]"></a>errata_108</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_108))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[68]"></a>errata_12</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_12))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[71]"></a>errata_136</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_136))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[69]"></a>errata_16</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_16))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[72]"></a>errata_182</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_182))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[6a]"></a>errata_31</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_31))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[6b]"></a>errata_32</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_32))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[6c]"></a>errata_36</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_36))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[6d]"></a>errata_37</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_37))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[6e]"></a>errata_57</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_57))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[6f]"></a>errata_66</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_66))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
